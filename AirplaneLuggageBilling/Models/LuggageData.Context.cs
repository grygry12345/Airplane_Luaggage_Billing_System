//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AirplaneLuggageBilling.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LugageBillingEntities : DbContext
    {
        public LugageBillingEntities()
            : base("name=LugageBillingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Airport_Employee> Airport_Employee { get; set; }
        public virtual DbSet<Airports> Airports { get; set; }
        public virtual DbSet<Security> Security { get; set; }
        public virtual DbSet<Transport_Vehicle> Transport_Vehicle { get; set; }
        public virtual DbSet<Transporter> Transporter { get; set; }
        public virtual DbSet<Air_Company> Air_Company { get; set; }
        public virtual DbSet<Airplane> Airplane { get; set; }
        public virtual DbSet<Company_Employee> Company_Employee { get; set; }
        public virtual DbSet<Pilot> Pilot { get; set; }
        public virtual DbSet<Teller> Teller { get; set; }
        public virtual DbSet<Flight> Flight { get; set; }
        public virtual DbSet<Luggage> Luggage { get; set; }
        public virtual DbSet<Passanger> Passanger { get; set; }
        public virtual DbSet<Airports_Air_Company_Date> Airports_Air_Company_Date { get; set; }
        public virtual DbSet<Counters> Counters { get; set; }
        public virtual DbSet<Transport_Vehicle_Airplane> Transport_Vehicle_Airplane { get; set; }
        public virtual DbSet<Luggage_Color> Luggage_Color { get; set; }
        public virtual DbSet<Ticket> Ticket { get; set; }
        public virtual DbSet<listAllCarry> listAllCarry { get; set; }
        public virtual DbSet<listAllEmployee> listAllEmployee { get; set; }
        public virtual DbSet<listTotalPlaneNumbers> listTotalPlaneNumbers { get; set; }
        public virtual DbSet<viewValidAgrements> viewValidAgrements { get; set; }
        public virtual DbSet<Counter_Teller_Dist> Counter_Teller_Dist { get; set; }
        public virtual DbSet<FlightDetails> FlightDetails { get; set; }
        public virtual DbSet<approvedTickets> approvedTickets { get; set; }
        public virtual DbSet<listPassange_Luggage> listPassange_Luggage { get; set; }
        public virtual DbSet<ordinaryTicket> ordinaryTicket { get; set; }
    
        [DbFunction("LugageBillingEntities", "luggagesDest")]
        public virtual IQueryable<luggagesDest_Result> luggagesDest(string destName)
        {
            var destNameParameter = destName != null ?
                new ObjectParameter("destName", destName) :
                new ObjectParameter("destName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<luggagesDest_Result>("[LugageBillingEntities].[luggagesDest](@destName)", destNameParameter);
        }
    
        public virtual ObjectResult<string> findAirport(string address, string city, string state, string country)
        {
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("findAirport", addressParameter, cityParameter, stateParameter, countryParameter);
        }
    
        public virtual int insertLuggageCapacity(Nullable<int> airplaneId, Nullable<double> weight, Nullable<int> transporter, Nullable<int> security, Nullable<int> teller, Nullable<int> passanger)
        {
            var airplaneIdParameter = airplaneId.HasValue ?
                new ObjectParameter("airplaneId", airplaneId) :
                new ObjectParameter("airplaneId", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(double));
    
            var transporterParameter = transporter.HasValue ?
                new ObjectParameter("transporter", transporter) :
                new ObjectParameter("transporter", typeof(int));
    
            var securityParameter = security.HasValue ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(int));
    
            var tellerParameter = teller.HasValue ?
                new ObjectParameter("teller", teller) :
                new ObjectParameter("teller", typeof(int));
    
            var passangerParameter = passanger.HasValue ?
                new ObjectParameter("passanger", passanger) :
                new ObjectParameter("passanger", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertLuggageCapacity", airplaneIdParameter, weightParameter, transporterParameter, securityParameter, tellerParameter, passangerParameter);
        }
    
        public virtual int updateSalary(string employeeType, Nullable<short> salary)
        {
            var employeeTypeParameter = employeeType != null ?
                new ObjectParameter("employeeType", employeeType) :
                new ObjectParameter("employeeType", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateSalary", employeeTypeParameter, salaryParameter);
        }
    
        public virtual ObjectResult<findCompanyEmployee_Result> findCompanyEmployee(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<findCompanyEmployee_Result>("findCompanyEmployee", idParameter);
        }
    
        public virtual int getNewEmployee(string fName, string mName, string lName, Nullable<System.DateTime> bDate, string address, Nullable<short> salary, string sex, string aircompany, string airportName, string employeeType)
        {
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var bDateParameter = bDate.HasValue ?
                new ObjectParameter("BDate", bDate) :
                new ObjectParameter("BDate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(short));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var aircompanyParameter = aircompany != null ?
                new ObjectParameter("aircompany", aircompany) :
                new ObjectParameter("aircompany", typeof(string));
    
            var airportNameParameter = airportName != null ?
                new ObjectParameter("airportName", airportName) :
                new ObjectParameter("airportName", typeof(string));
    
            var employeeTypeParameter = employeeType != null ?
                new ObjectParameter("employeeType", employeeType) :
                new ObjectParameter("employeeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getNewEmployee", fNameParameter, mNameParameter, lNameParameter, bDateParameter, addressParameter, salaryParameter, sexParameter, aircompanyParameter, airportNameParameter, employeeTypeParameter);
        }
    
        public virtual ObjectResult<listAllBaggages_Result> listAllBaggages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listAllBaggages_Result>("listAllBaggages");
        }
    
        public virtual ObjectResult<listAllLuggageInAirplane_Result> listAllLuggageInAirplane(Nullable<int> airplaneId)
        {
            var airplaneIdParameter = airplaneId.HasValue ?
                new ObjectParameter("airplaneId", airplaneId) :
                new ObjectParameter("airplaneId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listAllLuggageInAirplane_Result>("listAllLuggageInAirplane", airplaneIdParameter);
        }
    
        public virtual ObjectResult<listPilotAirplane_Result> listPilotAirplane()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listPilotAirplane_Result>("listPilotAirplane");
        }
    
        public virtual int retireEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("retireEmployee");
        }
    
        public virtual int deleteInvalidLugage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteInvalidLugage");
        }
    
        public virtual int deleteUnvalidTicket()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteUnvalidTicket");
        }
    
        public virtual ObjectResult<determineTicketPrice_Result> determineTicketPrice(Nullable<int> passangerId)
        {
            var passangerIdParameter = passangerId.HasValue ?
                new ObjectParameter("passangerId", passangerId) :
                new ObjectParameter("passangerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<determineTicketPrice_Result>("determineTicketPrice", passangerIdParameter);
        }
    
        public virtual ObjectResult<findLuggage_Result> findLuggage(Nullable<double> weight, string primaryColor, string secondaryColor)
        {
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(double));
    
            var primaryColorParameter = primaryColor != null ?
                new ObjectParameter("primaryColor", primaryColor) :
                new ObjectParameter("primaryColor", typeof(string));
    
            var secondaryColorParameter = secondaryColor != null ?
                new ObjectParameter("secondaryColor", secondaryColor) :
                new ObjectParameter("secondaryColor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<findLuggage_Result>("findLuggage", weightParameter, primaryColorParameter, secondaryColorParameter);
        }
    
        public virtual ObjectResult<listLuggages_Result> listLuggages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listLuggages_Result>("listLuggages");
        }
    
        public virtual int writeLuggageMessage(Nullable<bool> isSafe, Nullable<bool> isBaggage, Nullable<double> weight, Nullable<int> transporter, Nullable<int> secuity, Nullable<int> teller, Nullable<int> passanger)
        {
            var isSafeParameter = isSafe.HasValue ?
                new ObjectParameter("isSafe", isSafe) :
                new ObjectParameter("isSafe", typeof(bool));
    
            var isBaggageParameter = isBaggage.HasValue ?
                new ObjectParameter("isBaggage", isBaggage) :
                new ObjectParameter("isBaggage", typeof(bool));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(double));
    
            var transporterParameter = transporter.HasValue ?
                new ObjectParameter("transporter", transporter) :
                new ObjectParameter("transporter", typeof(int));
    
            var secuityParameter = secuity.HasValue ?
                new ObjectParameter("secuity", secuity) :
                new ObjectParameter("secuity", typeof(int));
    
            var tellerParameter = teller.HasValue ?
                new ObjectParameter("teller", teller) :
                new ObjectParameter("teller", typeof(int));
    
            var passangerParameter = passanger.HasValue ?
                new ObjectParameter("passanger", passanger) :
                new ObjectParameter("passanger", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("writeLuggageMessage", isSafeParameter, isBaggageParameter, weightParameter, transporterParameter, secuityParameter, tellerParameter, passangerParameter);
        }
    }
}
